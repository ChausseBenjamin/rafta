syntax = "proto3";

import "protobuf/src/google/protobuf/empty.proto";
import "protobuf/src/google/protobuf/timestamp.proto";

option go_package = "github.com/ChausseBenjamin/rafta/pkg/model";

message UUID {
	string value = 1;
}

enum TaskState {
  UNSPECIFIED = 0;
  PENDING     = 1;
  ONGOING     = 2;
  DONE        = 3;
  BLOCKED     = 4;
}

enum TaskFieldMask {
  TITLE      = 0;
  DESC       = 1;
  PRIORITY   = 2;
  STATE      = 3;
  RECURRENCE = 4;
  CREATED    = 5;
  UPDATED    = 6;
  TAGS       = 7;
}

message UserData {
  string name  = 1;
  string email = 2;
}

message UserMetadata {
  google.protobuf.Timestamp created_on = 1;
  google.protobuf.Timestamp updated_on = 2;
}

message User {
  UUID         id       = 1;
  UserData     data     = 2;
  UserMetadata metadata = 3;
}

message TaskRecurrence {
	string pattern = 1;
	bool   active  = 2;
}

message TaskData {
  string                    title         = 1;
  string                    desc          = 2; // markdown
	// Intentionally vague for flexible client implementation:
  // 0=undefined, 1=highest, 0xFFFFFFFF=lowest
  uint32                    priority      = 3;
  TaskState                 state         = 4;
	TaskRecurrence            recurrence    = 5;
	TaskMetadata              metadata      = 6;
  google.protobuf.Timestamp do_date       = 7;
  google.protobuf.Timestamp due_date      = 8;
  repeated string           tags          = 9;
}

message TaskMetadata {
  google.protobuf.Timestamp created_on    = 1;
  google.protobuf.Timestamp updated_on    = 2;
}


message TaskUpdateRequest {
	UUID id        = 1;
  TaskData data  = 2;
  repeated TaskFieldMask masks = 3;
}

message TaskUpdateResponse {
  TaskData               data  = 1;
	TaskMetadata           meta  = 2;
  repeated TaskFieldMask masks = 3;
}

message Task {
  UUID         id       = 1;
  TaskData     data     = 2;
	TaskMetadata metadata = 3;
}

message TaskList {
  repeated Task tasks = 1;
}

message UserList {
  repeated User users = 1;
}

message JWT {
  string access  = 1;
  string refresh = 2;
}

message LoginResponse {
  User user  = 1;
  JWT tokens = 2;
}

message UserSignupRequest {
  UserData user     = 1;
  string userSecret = 2;
}

message SignupResponse {
  User user  = 1;
  JWT tokens = 2;
}

message RefreshRequest {
  string refreshToken = 1;
}

message ChangePasswdRequest {
	UUID   id     = 1;
	string secret = 2;
}

message PasswdMessage {
	string secret = 1;
}

// Accessible to all users only once authenticated
// Many methods take `.Empty` as an input since users can only
// query/mutate their own data (which is implied from authentication).
// Any task involoving another users data is done via the Admin service.
service Rafta {
	// Retrieval
  rpc GetAllTasks(google.protobuf.Empty) returns (TaskList);
  rpc GetTask(UUID) returns (Task); // Input: task UUID
  rpc GetUserInfo(google.protobuf.Empty) returns (User);

	// User Manipulation
	rpc DeleteUser(google.protobuf.Empty) returns (google.protobuf.Empty);
	rpc UpdateCredentials(PasswdMessage) returns (google.protobuf.Empty);
	rpc UpdateUserInfo(User) returns (google.protobuf.Empty);

  // Task Manipulation
  rpc CreateTask(TaskData) returns (Task);
  rpc DeleteTask(UUID) returns (google.protobuf.Empty);
  rpc UpdateTask(TaskUpdateRequest) returns (TaskUpdateResponse);

}

// Accessible only to users with the admin role
service Admin {
  // Retrieval
  rpc GetAllUsers(google.protobuf.Empty) returns (UserList);
  rpc GetUser(UUID) returns (User);
  rpc GetUserTasks(UUID) returns (TaskList);

  // Manipulation
	rpc UpdateCredentials(ChangePasswdRequest) returns (google.protobuf.Empty);
  rpc CreateUser(UserSignupRequest) returns (google.protobuf.Empty);
  rpc DeleteUser(UUID) returns (google.protobuf.Empty);
  rpc UpdateUser(User) returns (google.protobuf.Empty);

}

service Auth {
	rpc Signup(UserSignupRequest) returns (SignupResponse);
  rpc Login(google.protobuf.Empty) returns (LoginResponse);
  rpc Refresh(google.protobuf.Empty) returns (JWT);
}
